#! /usr/bin/python

import subprocess
import argparse
import sys
import re

def get_last_process(indent, processes):
    for last_indent, last_process in reversed(processes):
        if len(indent) == len(last_indent):
            return last_process

def get_parent_process(indent, processes):
    for parent_indent, parent_process in reversed(processes):
        if len(indent) > len(parent_indent):
            return parent_process

def has_children(line_number, lines):
    if line_number == len(lines) - 1:
        return False
    line = lines[line_number]
    indent = re.search("^ *", line).group()
    next_line = lines[line_number+1]
    next_indent = re.search("^ *", next_line).group()
    return len(indent) < len(next_indent)

def getoption(arg):
    return args.args[args.args.index(arg) + 1]

def ifoption(arg, value, default=""):
    return arg in args.args and value or default

parser = argparse.ArgumentParser(description="Run commands in a flow")
parser.add_argument("file", type=argparse.FileType("r"), help="file to run")
parser.add_argument("-m", "--one-mouth", action="store_true", help="all the data flows to the standard output")
parser.add_argument("args", nargs=argparse.REMAINDER)
args = parser.parse_args()
internal_commands = [getoption, ifoption]
if args.one_mouth:
    processes = list()
    lines = args.file.readlines()
    for line_number, line in enumerate(lines):
        indent = re.search(r"^ *", line).group()
        parent_process = get_parent_process(indent, processes)
        if parent_process:
            last_process = get_last_process(indent, processes)
            if last_process:
                last_process.communicate()
            command = filter(lambda command: re.search(r"^ *([^ \n]+)", line).groups()[0] == command.func_name, internal_commands)
            if command:
                parent_process.stdin.write(str(command[0](*line.split()[1:])))
                process = None
            else:
                if has_children(line_number, lines):
                    process = subprocess.Popen(line, shell=True, stdin=subprocess.PIPE, stdout=parent_process.stdin)
                else:
                    process = subprocess.Popen(line, shell=True, stdout=parent_process.stdin)
        else:
            last_process = get_last_process(indent, processes)
            if last_process:
                last_process.communicate()
            command = filter(lambda command: re.search(r"^ *([^ \n]+)", line).groups()[0] == command.func_name, internal_commands)
            if command:
                sys.stdout.write(str(command[0](*line.split()[1:])))
                sys.stdout.flush()
                process = None
            else:
                if has_children(line_number, lines):
                    process = subprocess.Popen(line, shell=True, stdin=subprocess.PIPE, stdout=sys.stdout)
                else:
                    process = subprocess.Popen(line, shell=True, stdout=sys.stdout)
        processes.append([indent, process])
    sys.exit(0)
process = subprocess.Popen(args.file.readline(), shell=True, stdin=sys.stdin, stdout=subprocess.PIPE)
for line in args.file.readlines():
    process = subprocess.Popen(line, shell=True, stdin=process.stdout, stdout=subprocess.PIPE)
process = subprocess.Popen("cat", shell=True, stdin=process.stdout, stdout=sys.stdout)
process.wait()
